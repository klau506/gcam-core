<?xml version="1.0" encoding="UTF-8"?>
<queries>
   <aQuery>
      <all-regions />
      <supplyDemandQuery title="ag production by crop type">
         <axis1 name="sector">sector[@name]</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (local-name()='AgSupplySector')]//
            output-primary/physical-output/node()</xPath>
         <comments>primary output only (no residue biomass)</comments>
      </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
               <supplyDemandQuery title="ag production by subsector (land use region)">
                    <axis1 name="technology">technology[@name]</axis1>
                    <axis2 name="Year">physical-output[@vintage]</axis2>
                    <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (local-name()='AgSupplySector')]/
            *[@type='subsector']//output-primary/physical-output/node()</xPath>
                    <comments>primary output only (no residue biomass)</comments>
                </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <supplyDemandQuery title="food consumption by type (specific)">
         <axis1 name="technology">technology</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' (:collapse:) and (@name='FoodDemand_Staples' or @name='FoodDemand_NonStaples')]//
            *[@type='subsector']//*[@type='technology']/
            *[@type='output' (:collapse:)]/physical-output/node()</xPath>
         <comments />
      </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
            <supplyDemandQuery title="food consumption by type (general)">
                <axis1 name="sector">sector</axis1>
                <axis2 name="Year">physical-output[@vintage]</axis2>
                <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='FoodDemand_Staples' or @name='FoodDemand_NonStaples')]//
            *[@type='output']/physical-output/node()</xPath>
                <comments/>
            </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <supplyDemandQuery title="food demand">
         <axis1 name="input">input[@name]</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="demand" group="false" sumAll="false">gcam-consumer[@name='FoodDemand']//*[@type='input']/demand-physical/node()</xPath>
         <comments />
      </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
            <supplyDemandQuery title="demand balances by crop commodity">
                <axis1 name="sector">sector</axis1>
                <axis2 name="Year">demand-physical[@vintage]</axis2>
                <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector']//*[@type='input' and
            (@name='regional corn' or @name='regional fibercrop' or @name='regional fruits' or @name='regional legumes'
               or @name='regional misccrop' or @name='regional nuts_seeds' or @name='regional oilcrop' or @name='regional othergrain'
               or @name='regional oilpalm' or @name='regional rice' or @name='regional root_tuber'
               or @name='regional soybean' or @name='regional sugarcrop' or @name='regional vegetables' or @name='regional wheat'
               or @name='FodderGrass' or @name='FodderHerb' or @name='Forest' or @name='Pasture')]/
               demand-physical/node()</xPath>
                <comments/>
            </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <supplyDemandQuery title="food demand prices">
         <axis1 name="input">input[@name]</axis1>
         <axis2 name="Year">price-paid[@vintage]</axis2>
         <xPath buildList="true" dataName="price" group="false" sumAll="false">gcam-consumer[@name='FoodDemand']//*[@type='input']/price-paid/node()</xPath>
         <comments />
      </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <supplyDemandQuery title="ag import vs. domestic prices">
         <axis1 name="subsector">subsector</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and contains(@name, 'regional')]/*[@type='subsector']/cost[@unit='1975$/kg' or @unit='1975$/m3']/text()</xPath>
         <comments />
      </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <supplyDemandQuery title="ag regional prices (weighted average b/t domestic and imported prices)">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and contains(@name, 'regional')]/cost[@unit='1975$/kg' or @unit='1975$/m3']/text()</xPath>
         <comments />
      </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
                <supplyDemandQuery title="meat and dairy prices">
                    <axis1 name="sector">sector</axis1>
                    <axis2 name="Year">cost</axis2>
                    <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and
               (@name='Beef' or @name='SheepGoat' or @name='Pork' or @name='Dairy' or @name='Poultry')]/
               cost/text()</xPath>
                    <comments/>
                </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <supplyDemandQuery title="meat and dairy production by tech">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">physical-output[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and
               (@name='Beef' or @name='SheepGoat' or @name='Pork' or @name='Dairy' or @name='Poultry')]/
               *[@type='subsector']/*[@type='technology']//
               *[@type='output']/physical-output/node()</xPath>
         <comments />
      </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
	  <supplyDemandQuery title="biophysical water demand by ag tech">
              <axis1 name="sector">sector</axis1>
              <axis2 name="Year">demand-physical[@vintage]</axis2>
              <xPath buildList="true" dataName="input" group="false" sumAll="false">AgSupplySector/*[@type='subsector']/*[@type='technology']/
               *[@type='input' and (@name='biophysical water consumption')]/demand-physical/node()</xPath>
              <comments/>
        </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
                <supplyDemandQuery title="irrigation water consumption by ag tech">
                    <axis1 name="sector">sector</axis1>
                    <axis2 name="Year">demand-physical[@vintage]</axis2>
                    <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and not(contains(@name, 'water_td_irr'))]/*[@type='subsector']/*[@type='technology']/
               *[@type='input' and contains(@name, 'water_td_irr') and ends-with(@name, '_C')]/
               demand-physical/node()</xPath>
                    <comments/>
                </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <supplyDemandQuery title="water consumption by meat and dairy production">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector']//
               *[@type='input' and contains(@name,'water_td_an') and ends-with(@name,'_C')]/
               demand-physical/node()</xPath>
         <comments />
      </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <supplyDemandQuery title="water consumption by subsector">
         <axis1 name="subsector">subsector</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and not(contains(@name, 'water_td'))]/*[@type='subsector']//*[@type='input' (:collapse:) and contains(@name,'water_td')
         and ends-with(@name,'_C')]/demand-physical/node()</xPath>
         <comments />
         <labelRewriteList append-values="false">
            <level name="sector">
               <rewrite from="elec_Gen_III" to="electricity" />
               <rewrite from="elec_CSP_storage" to="electricity" />
               <rewrite from="elec_refined liquids (steam/CT)" to="electricity" />
               <rewrite from="elec_geothermal" to="electricity" />
               <rewrite from="elec_refined liquids (CC)" to="electricity" />
               <rewrite from="elec_Gen_II_LWR" to="electricity" />
               <rewrite from="elec_gas (steam/CT)" to="electricity" />
               <rewrite from="elec_coal (IGCC)" to="electricity" />
               <rewrite from="elec_gas (CC)" to="electricity" />
               <rewrite from="elec_biomass (IGCC)" to="electricity" />
               <rewrite from="elec_coal (conv pul)" to="electricity" />
               <rewrite from="elec_CSP" to="electricity" />
               <rewrite from="elec_biomass (conv)" to="electricity" />
            </level>
            <level name="subsector">
               <rewrite from="gas (CC)" to="gas" />
               <rewrite from="CSP" to="solar" />
               <rewrite from="biomass (conv)" to="biomass" />
               <rewrite from="Gen_II_LWR" to="nuclear" />
               <rewrite from="coal (conv pul)" to="coal" />
               <rewrite from="coal (IGCC)" to="coal" />
               <rewrite from="gas (steam/CT)" to="gas" />
               <rewrite from="CSP_storage" to="solar" />
               <rewrite from="biomass (IGCC)" to="biomass" />
               <rewrite from="Gen_III" to="nuclear" />
               <rewrite from="refined liquids (CC)" to="refined liquids" />
               <rewrite from="geothermal" to="geothermal" />
               <rewrite from="refined liquids (steam/CT)" to="refined liquids" />
            </level>
         </labelRewriteList>
      </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
        <supplyDemandQuery title="water withdrawals by region">
            <axis1 name="region">region</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' (:collapse:) and not(contains(@name, 'water_td'))]//*[@type='input' (:collapse:) and contains(@name,'water_td')
         and ends-with(@name,'_W')]/demand-physical/node()</xPath>
            <comments/>
        </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <supplyDemandQuery title="ag import vs. domestic supply (Regional Armington competition)">
         <axis1 name="input">input</axis1>
         <axis2 name="Year">demand-physical[@vintage]</axis2>
         <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and contains(@name, 'regional')]/*[@type='subsector']//*[@type='input']/demand-physical[@unit='Mt' or @unit='billion m3']/node()</xPath>
         <comments />
      </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <marketQuery title="prices of all markets">
         <axis1 name="market">market</axis1>
         <axis2 name="Year">market</axis2>
         <xPath buildList="true" dataName="price" group="false" sumAll="false">Marketplace/market[true()]/price/node()</xPath>
         <comments />
      </marketQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <supplyDemandQuery title="Ag Commodity Prices">
         <axis1 name="sector">sector</axis1>
         <axis2 name="Year">cost</axis2>
         <xPath buildList="true" dataName="yield" group="false" sumAll="false">*[@type='sector' and
            (exists(child::keyword/@supplysector) or local-name() =
            'AgSupplySector')]/cost/text()</xPath>
         <comments />
      </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
      <emissionsQueryBuilder title="International Aviation emissions">
         <axis1 name="subsector">subsector</axis1>
         <axis2 name="Year">emissions</axis2>
         <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector' ]/*[@type = 'subsector' and (@name='International Aviation')]//*[@type = 'GHG']/emissions/node()</xPath>
         <comments>This query will not include resource emissions</comments>
      </emissionsQueryBuilder>
   </aQuery>
   <aQuery>
      <all-regions />
      <emissionsQueryBuilder title="International Shipping emissions">
         <axis1 name="subsector">subsector</axis1>
         <axis2 name="Year">emissions</axis2>
         <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector' ]/*[@type = 'subsector' and (@name='International Ship')]//*[@type = 'GHG']/emissions/node()</xPath>
         <comments>This query will not include resource emissions</comments>
      </emissionsQueryBuilder>
   </aQuery>
   <aQuery>
      <all-regions />
      <emissionsQueryBuilder title="nonCO2 emissions by resource production">
         <axis1 name="GHG">GHG</axis1>
         <axis2 name="Year">emissions</axis2>
         <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'resource']//*[@type = 'GHG']/emissions/node()</xPath>
         <comments />
      </emissionsQueryBuilder>
   </aQuery>
   <aQuery>
      <all-regions />
            <emissionsQueryBuilder title="nonCO2 emissions by sector (excluding resource production)">
                <axis1 name="GHG">GHG</axis1>
                <axis2 name="Year">emissions</axis2>
                <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector']//*[@type = 'GHG' and @name != 'CO2' and @name != 'CO2_FUG']/emissions/node()</xPath>
                <comments/>
            </emissionsQueryBuilder>
   </aQuery>
   <aQuery>
      <all-regions />
            <supplyDemandQuery title="purpose-grown biomass production">
                <axis1 name="sector">sector[@name]</axis1>
                <axis2 name="Year">physical-output[@vintage]</axis2>
                <xPath buildList="false" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='biomass')]//*[@type='output' (:collapse:)]/
            physical-output/node()</xPath>
                <comments/>
            </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
            <resourceQuery title="MSW production">
                <axis1 name="resource">resource</axis1>
                <axis2 name="Year">output</axis2>
                <xPath buildList="false" dataName="production" group="false" sumAll="false">*[@type='resource' and (@name='biomass')]//output/node()</xPath>
                <comments/>
            </resourceQuery>
   </aQuery>
   <aQuery>
      <all-regions />
            <supplyDemandQuery title="regional biomass consumption">
                <axis1 name="sector">sector</axis1>
                <axis2 name="Year">demand-physical[@vintage]</axis2>
                <xPath buildList="false" dataName="input" group="false" sumAll="false">*[@type='sector' and (@name='regional biomass')]//*[@type='input']/
            demand-physical/node()</xPath>
                <comments/>
            </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
            <supplyDemandQuery title="residue biomass production">
                <axis1 name="sector">sector[@name]</axis1>
                <axis2 name="Year">physical-output[@vintage]</axis2>
                <xPath buildList="false" dataName="output" group="false" sumAll="false">*[@type='sector' and not(@name='biomass')]//*[@type='output' and @name='biomass']/physical-output/node()</xPath>
                <comments/>
            </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
        <resourceQuery title="Water Withdrawals by Basin (Runoff)">
            <axis1 name="Runoff water">resource[@name]</axis1>
            <axis2 name="Year">production[@year]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'resource' and contains(@name, 'water withdrawals')]/*[@type = 'subresource' and contains(@name, 'runoff')]/production/node()</xPath>
            <comments/>
        </resourceQuery>
   </aQuery>
   <aQuery>
      <all-regions />
        <resourceQuery title="Water Withdrawals by Basin (Groundwater)">
            <axis1 name="Groundwater">resource[@name]</axis1>
            <axis2 name="Year">production[@year]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type = 'resource' and contains(@name, 'water withdrawals')]/*[@type = 'subresource' and contains(@name, 'groundwater')]/production/node()</xPath>
            <comments/>
        </resourceQuery>
   </aQuery>
   <aQuery>
      <all-regions />
            <emissionsQueryBuilder title="CO2 emissions by region">
                <axis1 name="region">region</axis1>
                <axis2 name="Year">emissions</axis2>
                <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector' (:collapse:) or @type = 'resource' (:collapse:)](: / *[@type = 'subresource' (: collapse :)] :)//*[((@name='CO2' or @name = 'CO2_FUG'))]/emissions/node()</xPath>
                <comments/>
            </emissionsQueryBuilder>
   </aQuery>
   <aQuery>
      <all-regions />
            <emissionsQueryBuilder title="nonCO2 emissions by region">
                <axis1 name="GHG">GHG</axis1>
                <axis2 name="Year">emissions</axis2>
                <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector' (:collapse:) or @type = 'resource' (:collapse:)](: / *[@type = 'subresource' (: collapse :)] :)//
            *[@type = 'GHG' and @name != 'CO2' and @name != 'CO2_FUG']/emissions/node()</xPath>
				<labelRewriteList append-values="false">
                    <level name="GHG">
                        <rewrite from="CO2_FUG" to="CO2"/>
                    </level>
                </labelRewriteList>
                <comments/>
            </emissionsQueryBuilder>
   </aQuery>
   <aQuery>
      <all-regions />
            <supplyDemandQuery title="CO2 emissions by sector (no bio) (excluding resource production)">
                <axis1 name="sector">sector[@name]</axis1>
                <axis2 name="Year">emissions[@year]</axis2>
                <xPath buildList="true" dataName="input" group="false" sumAll="false"><![CDATA[
                     
            declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
            let $scn := $parent/ancestor::scenario,
            $rgn := $parent (: /ancestor::region :)
            return
            document { element scenario {
            $scn/@*,
            element region {
            $rgn/@*,
            $append
            }
            }
            }
            (: I can get by with just the scenario and region
            let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
            return
            if(local-name($parent) != 'scenario')
            then local:append-heirarchy($parent/parent::*, $new_node)
            else document { $new_node } :)
            }; 
            declare function local:get-carbon-coef($good as xs:string) as xs:decimal {
            let $carbonCoefs := (
            <PrimaryFuelCO2Coef name="biomass">0</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="coal">27.3</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="crude oil">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="delivered biomass">23</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="delivered coal">27.3</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="delivered gas">14.2</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="gas pipeline">14.2</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="gas processing">14.2</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="limestone">0.08</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="natural gas">14.2</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="refined liquids enduse">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="refined liquids industrial">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="refining">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional biomass">23</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional biomassOil">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional coal">27.3</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional corn for ethanol">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional natural gas">14.2</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional oil">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="regional sugar for ethanol">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="traded unconventional oil">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="unconventional oil">21.1</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="unconventional oil production">19.6</PrimaryFuelCO2Coef>,
            <PrimaryFuelCO2Coef name="wholesale gas">14.2</PrimaryFuelCO2Coef>),
            $currCoef := $carbonCoefs[@name=$good]/text()
            return if(exists($currCoef)) then $currCoef else 0.0
            };
            
            
            declare function local:is-carbonatious-fuel($good as xs:string) as xs:boolean {
            not(local:get-carbon-coef($good) = 0.0)
            };
            declare function local:generate-sector-output-coefs($inputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
            if(empty($inputNameQueue)) then $coefs
            else if( exists($coefs[@name = $inputNameQueue[1]]) or exists(index-of(('traded unconventional oil'),
            $inputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$inputNameQueue[1]]) or not(local:is-carbonatious-fuel($inputNameQueue[1])))
            then 
            local:generate-sector-output-coefs(remove($inputNameQueue, 1), $currTree, $coefs, $is_usa)
            else
            let $inputName := $inputNameQueue[1],
            $newInputNameQueue := remove($inputNameQueue, 1),
            $useInputs := $currTree//*[@type='input' and @name=$inputName],
            $useSectors := distinct-values($useInputs/ancestor::*[@type='sector']/@name),
            $totalInputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage)
            return element input {
            attribute vintage { $vintage },
            text {
            sum($useInputs/demand-physical[@vintage=$vintage])
            }
            },
            $new_coefs := if(empty($useSectors)) then
            $coefs
            else
            $coefs | element sector {
            attribute name { $inputName },
            for $output in $useSectors
            return element output {
            attribute name { $output },
            for $inputSum in $totalInputSum
            let $currSectorInputs := $useInputs[ancestor::*[@type='sector' and @name=$output]],
            $outputSum := sum($currSectorInputs/demand-physical[@vintage=$inputSum/@vintage]),
            $carbonIn := sum($currSectorInputs/parent::*//carbon-content[@vintage=$inputSum/@vintage]),
            $carbonOut := sum($currSectorInputs/parent::*/output-primary/physical-output[@vintage=$inputSum/@vintage]) *
            local:get-carbon-coef($output)
            return (element share {
            attribute vintage { $inputSum/@vintage },
            text { $outputSum div $inputSum }
            }, element carbon_ratio {
            attribute vintage { $inputSum/@vintage },
            text{ if($carbonIn > 0) then $carbonOut div $carbonIn else 0 }
            })
            }
            }
            return 
            local:generate-sector-output-coefs(distinct-values(($newInputNameQueue, $useSectors)), $currTree, $new_coefs, $is_usa)
            };
            declare function local:apply-coefs($outputName as xs:string, $emissions as node()*, $coefs as node()*) as node()* {
            if(exists($coefs[@name=$outputName]) and abs(sum($emissions)) > 0.001) then
            for $output in $coefs[@name=$outputName]/output
            let $emiss_go := for $year in distinct-values($emissions/@year)
            let $emissThisVintage := $emissions[@year=$year],
            $firstEmiss := $emissThisVintage[1],
            $emissSum := sum($emissThisVintage),
            $shareThisVintage := $output/share[@vintage=$year],
            $carbonRatioThisVintage := $output/carbon_ratio[@vintage=$year],
            $coefThisVintage := $shareThisVintage * $carbonRatioThisVintage
            where $coefThisVintage > 0
            return element { local-name($firstEmiss) } {
            $firstEmiss/@*,
            text{ $emissSum * $coefThisVintage }
            },
            $emiss_stay := for $year in distinct-values($emissions/@year)
            let $emissThisVintage := $emissions[@year=$year],
            $firstEmiss := $emissThisVintage[1],
            $emissSum := sum($emissThisVintage),
            $shareThisVintage := $output/share[@vintage=$year],
            $carbonRatioThisVintage := 1.0 - $output/carbon_ratio[@vintage=$year],
            $coefThisVintage := $shareThisVintage * $carbonRatioThisVintage 
            where $coefThisVintage > 0
            return element { local-name($firstEmiss) } {
            $firstEmiss/@*,
            text{ $emissSum * $coefThisVintage }
            }
            return local:apply-coefs($output/@name, $emiss_go, $coefs) |
            element sector {
            attribute name { $output/@name},
            attribute type { 'sector' },
            $emiss_stay
            }
            else if( abs(sum($emissions)) > 0.001) then
            element sector {
            attribute name { $outputName },
            attribute type { 'sector' },
            $emissions
            }
            else
            (: These are the residuals from chasing simulenaties, I've left this here
            for debuging purposes :)
            element sector {
            attribute name { $outputName },
            attribute type { 'sector' }(:,
            $emissions:)
            }
            };
            declare function local:run-emiss-by-enduse($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* { 	
            (:unordered { :) 	
            let $regionsG := if(not($regions[1] = 'Global'))
            then $regions
            else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
            return
            for $scenario in $scenarios, 	    
            $region in $regionsG 	
            let $scenario_split := tokenize($scenario, ' '), 	    
            $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
            $sector_emiss := $currTree/*[@type='sector' and not(@name='regional biomass' or @name='regional biomassOil' or @name='regional corn for ethanol' or @name='regional sugar for ethanol' or @name='regional sugarbeet for ethanol')]//CO2[@type='GHG' (:collapse:) and @name='CO2']/emissions/text(),
            $currEmissSectors := $currTree/*[@type='sector' and (@name='regional biomass' or @name='regional biomassOil' or @name='regional corn for ethanol' or @name='regional sugar for ethanol' or @name='regional sugarbeet for ethanol')],
            $coefs := local:generate-sector-output-coefs(distinct-values($currEmissSectors/@name), $currTree, (), false()),
            $downstream_emiss := for $sectorName in distinct-values($currEmissSectors/@name)
            return local:append-heirarchy($currTree, local:apply-coefs($sectorName, $currEmissSectors[@name=$sectorName]//CO2[@name='CO2']/emissions, $coefs))//text() 
            return ($sector_emiss, $downstream_emiss )
            (:  } :)
            };
            local:run-emiss-by-enduse((:scenarios:), (:regions:), (:collection:))
            
         
                ]]></xPath>
                <comments/>
                <labelRewriteList append-values="false">
                    <level name="sector">
                        <rewrite from="elec_Gen_III" to="electricity"/>
                        <rewrite from="elec_CSP_storage" to="electricity"/>
                        <rewrite from="elec_refined liquids (steam/CT)" to="electricity"/>
                        <rewrite from="elec_geothermal" to="electricity"/>
                        <rewrite from="elec_refined liquids (CC)" to="electricity"/>
                        <rewrite from="elec_Gen_II_LWR" to="electricity"/>
                        <rewrite from="elec_gas (steam/CT)" to="electricity"/>
                        <rewrite from="elec_coal (IGCC)" to="electricity"/>
                        <rewrite from="elec_gas (CC)" to="electricity"/>
                        <rewrite from="elec_biomass (IGCC)" to="electricity"/>
                        <rewrite from="elec_coal (conv pul)" to="electricity"/>
                        <rewrite from="elec_CSP" to="electricity"/>
                        <rewrite from="elec_biomass (conv)" to="electricity"/>
                    </level>
                </labelRewriteList>
            </supplyDemandQuery>
   </aQuery>
   <aQuery>
      <all-regions />
            <query title="LUC emissions by region">
                <axis1 name="LandLeaf">LandLeaf</axis1>
                <axis2 name="Year">land-use-change-emission[@year]</axis2>
                <xPath buildList="true" dataName="land-use-change-emission" group="false" sumAll="true">/LandNode[@name='root' or @type='LandNode' (:collapse:)]//
                land-use-change-emission[@year&gt;1970]/text()</xPath>
                <comments/>
            </query>
   </aQuery>
</queries>