PROPERTY CHANGEtitle
PROPERTY CHANGEdocument-replaced
DOCUMENT REPLACED
PROPERTY CHANGEdocument-replaced
DOCUMENT REPLACED
Going to change controls
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Didn't find builder for detailed land allocation query going to use defaults
Didn't find builder for land allocation by crop query going to use defaults
Didn't find builder for aggregated land allocation query going to use defaults
Didn't find builder for land allocation in a specified land use region query going to use defaults
Didn't find builder for land allocation by crop and water source query going to use defaults
Didn't find builder for LUC emissions by region query going to use defaults
Didn't find builder for LUC emissions by LUT query going to use defaults
Didn't find builder for LUC emissions by LUT in a specified land use region query going to use defaults
Didn't find builder for vegetative carbon stock by region query going to use defaults
Didn't find builder for profit rate query going to use defaults
Didn't find builder for profit rate in a specified land use region query going to use defaults
Didn't find builder for land leaf shares query going to use defaults
Didn't find builder for land leaf shares in a specified land use region query going to use defaults
Going to change controls
About to perform query: collection()/scenario
About to perform query: distinct-values(collection()/scenario/world/*[@type = 'region']/@name)
Didn't find builder for detailed land allocation query going to use defaults
Didn't find builder for land allocation by crop query going to use defaults
Didn't find builder for aggregated land allocation query going to use defaults
Didn't find builder for land allocation in a specified land use region query going to use defaults
Didn't find builder for land allocation by crop and water source query going to use defaults
Didn't find builder for LUC emissions by region query going to use defaults
Didn't find builder for LUC emissions by LUT query going to use defaults
Didn't find builder for LUC emissions by LUT in a specified land use region query going to use defaults
Didn't find builder for vegetative carbon stock by region query going to use defaults
Didn't find builder for profit rate query going to use defaults
Didn't find builder for profit rate in a specified land use region query going to use defaults
Didn't find builder for land leaf shares query going to use defaults
Didn't find builder for land leaf shares in a specified land use region query going to use defaults
About to perform query: collection()/singleQueryListCache/cache[@id=546473563]/text()
Time : 16
Before Function: 1684749853441
About to perform query: 
                     
      	 	 	 declare function local:get-weighted-eff($outputs as node()*) as node()* {
			 	 		   unordered {
			 			     for $year in distinct-values($outputs/physical-output/@vintage)
			 		             let $eff_unweight := sum(for $res in $outputs/physical-output[@vintage = $year]
			 		                               let $eff_curr := $res/parent::*/following-sibling::input-energy[1]/IO-coefficient[@vintage = $year]
			 		                               (: where $res/physical-output/@vintage = $year :)
			 		                               return $res div $eff_curr),
			 			             $weight := sum(for $res in $outputs/physical-output[@vintage = $year]
			 		                         (: where $res/physical-output/@vintage = $year :)
			 		                         return $res),
			 			             $eff_weighted := $eff_unweight div $weight
			 		             return element efficiency-weighted {attribute year { $year }, text { $eff_weighted }}
			             		}
			 	 	 };
			 	 	 declare function local:append-heirarchy($parent as node(), $append as node()) as node() {
			 	 		 let $scn := $parent/ancestor::scenario,
			 			   	  $rgn := $parent/ancestor::region
			 			   return
			 			   	  document { element scenario {
			 			 	  					$scn/@*,
			 			 						element region {
			 			 							$rgn/@*,
			 			 							$append
			 			 						}
			 			 	  				}
			 				}
			 	 		 (: let $new_node := element {local-name($parent)} {$parent/@*, $append} 	
			 	 		 return
			 	 		 if(local-name($parent) != 'scenario')
			 	 		 then local:append-heirarchy($parent/parent::*, $new_node)
			 	 		 else document { $new_node } :)
			 	 	 };  
			 	 	 declare function local:get-primary-renewable($outputs as node()*, $weighted_effs as node()*) as node()* {
			 	 	 unordered { 	
			 	 	 for $output in $outputs (:,
			 	 	 $weighted_eff in $weighted_effs :)
			 	 	 let $new_output :=  (: element tempParent { :)
			 	 	 element input {
			 	 		 attribute type {'input'},
			 	 		 attribute name {$output/parent::*/following-sibling::keyword/@primary-renewable},
			 	 		 element demand-physical {
			 	 			 attribute vintage {$output/@vintage},
			 	 			 attribute unit {$output/@unit},
			 	 			 text { $output div $weighted_effs[@year=$output/@vintage] }
			 	 		 }(: ,
			 	 		 element keyword {
			 	 			 attribute primary-consumption { (: if($output/parent::*/following-sibling::keyword[fn:exists(@primary-renewable)])
			 	 						 then :) $output/parent::*/following-sibling::keyword/@primary-renewable
			 	 						 (: else $output/parent::*/parent::*/@name :)
			 	 		       }
			 	 		 } :)
			 	 	 (: } :)
			 	 	 },
			 	 	 $new_root := local:append-heirarchy($output/parent::*/parent::*, $new_output)
			 	 	 (:where $output/@vintage = $weighted_eff/@year:)
			 	 	 return $new_root//text()
			 	 	 } 
			 	 	 };
			 	 	 declare function local:check-keyword($values as node()*) as node()* {
			 	 	 	unordered {
			 	 		for $value in $values
			 	 		let $input := $value/parent::*/parent::*,
			 	 		    $keyword_name :=
			 	 		        (: if($input/following-sibling::keyword[fn:exists(@primary-consumption)])
			 	 			then :) $input/following-sibling::keyword/@primary-consumption
			 	 			(: else $input/@name :), 
			 	 		    $new_parent := element {local-name($input)} {$input/@*, 
			 	 			$value/parent::*,
			 	 		        element keyword { attribute primary-consumption {$keyword_name} }
			 	 		        },
			 	 		    $new_root := local:append-heirarchy($input/parent::*, $new_parent)
			 	 		return $new_root//text()
			 	 		}
			 	 	};
			 	 
			 	 	 declare function local:run-primary-energy($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string*) as node()* { 	
			 	 	 (: unordered { :)
			 	 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 	 		  then $regions
			 	 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 	 return
			 	 	 for $scenario in $scenarios, 	    
			 	 	 $region in $regionsG 	
			 	 	 let $scenario_split := tokenize($scenario, ' '),
                     $scenario_name := string-join($scenario_split[position() < last()], ' '),
			 	 	 $scenario_date := $scenario_split[last()],
			 	 	 $currTree := collection($collection)/scenario[@name = $scenario_name and @date = $scenario_date]/world/*[@type = 'region' and @name=$region]
			 	 	 return (: get renewables from electricity :)
			 	 	 local:get-primary-renewable($currTree/*[@type='sector' (: collapse :) and (@name='electricity' or @name='elect_td_bld' or starts-with(@name,'elec_'))]//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output, local:get-weighted-eff($currTree/*[@type='sector' (: collapse :) and (@name='electricity' or starts-with(@name, 'elec_'))]//keyword[fn:exists(@average-fossil-efficiency)]/preceding-sibling::output-primary)) 
					 		 	| (: get renewables from H2ProdCS :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='H2 central production'](: /*[@type='subsector' (: collapse :) and fn:not(@name='electrolysis')] :)//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output, local:get-weighted-eff($currTree/supplysector[@name='H2 central production']//keyword[fn:exists(@average-fossil-efficiency)]/preceding-sibling::output-primary)) 
					 	 	 	| (: get renewables from H2ProdDist :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='H2 forecourt production'](: /*[@type='subsector' (: collapse :) and fn:not(@name='electrolysis')] :)//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output, local:get-weighted-eff($currTree/supplysector[@name='H2 forecourt production']//keyword[fn:exists(@average-fossil-efficiency)]/preceding-sibling::output-primary)) 
					 	 	 	| (: get the primaries :)
	 	 						(: local:check-keyword( :) $currTree//keyword[fn:exists(@primary-consumption)]/preceding-sibling::input-energy[not(contains(@name, 'water'))]/demand-physical/text() (: ) :)
                                | (: get traditional biomass :)
							    $currTree//*[@type='input' and @name='traditional biomass']/demand-physical/node()
			 	 	 	
			 	 	 (: } :)
	 	 }; 
            	 local:run-primary-energy(('Referenceee 2023-22-5T11:49:39+02:00'), ('USA'), ())
                 
            
                
In Function: 1684749853441
After build Tree: 1684749855395
After Add table: 1684749855395
